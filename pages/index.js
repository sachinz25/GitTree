import { useState } from 'react';
import styles from '../styles/Home.module.css';

export default function Home() {
  const [githubRepositoryUrl, setGithubRepositoryUrl] = useState('');
  const [branch, setBranch] = useState('main');
  const [treeContents, setTreeContents] = useState([]);
  const [error, setError] = useState('');

  const fetchRepositoryTree = async () => {
    if (!githubRepositoryUrl) {
      setError('Please enter a GitHub repository URL.');
      return;
    }

    try {
      // Extract owner and repo from the URL
      const [owner, repo] = githubRepositoryUrl
        .replace('https://github.com/', '')
        .split('/');

      // Fetch repository tree from GitHub API
      const response = await fetch(
        `https://api.github.com/repos/${owner}/${repo}/git/trees/${branch}?recursive=1`
      );

      if (!response.ok) {
        throw new Error('Failed to fetch repository data.');
      }

      const data = await response.json();

      // Map the tree data to the required format
      const contents = data.tree.map((item, index) => ({
        id: index + 1,
        text: item.path.split('/').pop(), // File/folder name
        depth: item.path.split('/').length, // Depth in the tree
      }));

      setTreeContents(contents);
      setError('');
    } catch (err) {
      setError('Failed to fetch repository data. Please check the URL and branch.');
      console.error(err);
    }
  };

  const copyTreeAsMarkdown = () => {
    const markdown = generateMarkdown(treeContents);
    navigator.clipboard
      .writeText(markdown)
      .then(() => alert('Tree copied to clipboard!'))
      .catch(() => alert('Failed to copy tree.'));
  };

  const generateMarkdown = (treeContents) => {
    let markdown = '```\n';
    markdown += `ðŸ“¦ ${githubRepositoryUrl.split('/').pop()}\n`;
    treeContents.forEach((item) => {
      markdown += '  '.repeat(item.depth - 1) + `â”œâ”€â”€ ${item.text}\n`;
    });
    markdown += '```\n';
    markdown += 'Â©generated by [GitTree](https://github.com/sachinz25/GitTree)';
    return markdown;
  };

  return (
    <div className={styles.container}>
      <h1>GitHub Repository Tree Generator</h1>

      {/* Repository URL Input */}
      <div className={styles.inputGroup}>
        <input
          type="text"
          placeholder="Enter GitHub Repository URL (e.g., https://github.com/owner/repo)"
          value={githubRepositoryUrl}
          onChange={(e) => setGithubRepositoryUrl(e.target.value)}
        />
        <input
          type="text"
          placeholder="Branch (default: main)"
          value={branch}
          onChange={(e) => setBranch(e.target.value)}
        />
        <button onClick={fetchRepositoryTree}>Generate Tree</button>
      </div>

      {/* Error Message */}
      {error && <p className={styles.error}>{error}</p>}

      {/* Tree Display */}
      <div className={styles.treeContainer}>
        {treeContents.length > 0 ? (
          <>
            <pre>
              <code>
                ðŸ“¦ {githubRepositoryUrl.split('/').pop()}
                {treeContents.map((item) => (
                  <div key={item.id}>
                    {'  '.repeat(item.depth - 1)}â”œâ”€â”€ {item.text}
                  </div>
                ))}
              </code>
            </pre>
            <button onClick={copyTreeAsMarkdown}>Copy Tree as Markdown</button>
          </>
        ) : (
          <p>Enter a GitHub repository URL to generate the tree.</p>
        )}
      </div>
    </div>
  );
}